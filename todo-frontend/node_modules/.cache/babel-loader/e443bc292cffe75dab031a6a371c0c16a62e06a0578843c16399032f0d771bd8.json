{"ast":null,"code":"const BASE_URL = \"http://127.0.0.1:5000/todos\";\nexport const todoApi = {\n  async getAllTodos() {\n    try {\n      const response = await fetch(BASE_URL);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || '获取TODO列表失败');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('获取TODO列表错误:', error);\n      throw error;\n    }\n  },\n  async addTodo(todoData) {\n    try {\n      const response = await fetch(BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(todoData)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || '添加TODO失败');\n      }\n      return data;\n    } catch (error) {\n      console.error('添加TODO错误:', error);\n      throw error;\n    }\n  },\n  async updateTodo(id, todoData) {\n    try {\n      if (!todoData.task && !todoData.status) {\n        throw new Error('至少需要更新一个字段');\n      }\n      const response = await fetch(`${BASE_URL}/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(todoData)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || '更新TODO失败');\n      }\n      return data;\n    } catch (error) {\n      console.error('更新TODO错误:', error);\n      throw error;\n    }\n  },\n  async deleteTodo(id) {\n    try {\n      const response = await fetch(`${BASE_URL}/${id}`, {\n        method: 'DELETE'\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || '删除TODO失败');\n      }\n      return data;\n    } catch (error) {\n      console.error('删除TODO错误:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["BASE_URL","todoApi","getAllTodos","response","fetch","ok","errorData","json","Error","error","console","addTodo","todoData","method","headers","body","JSON","stringify","data","updateTodo","id","task","status","deleteTodo"],"sources":["D:/shawn_workspace/CSSI project/fullstack repo3/todo-frontend/src/api/todoApi.ts"],"sourcesContent":["import { Todo, TodoFormData, ApiResponse } from '../types/types';\r\n\r\nconst BASE_URL = \"http://127.0.0.1:5000/todos\";\r\n\r\nexport const todoApi = {\r\n  async getAllTodos(): Promise<Todo[]> {\r\n    try {\r\n      const response = await fetch(BASE_URL);\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || '获取TODO列表失败');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('获取TODO列表错误:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async addTodo(todoData: TodoFormData): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(BASE_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(todoData),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.error || '添加TODO失败');\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('添加TODO错误:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateTodo(id: string, todoData: Partial<TodoFormData>): Promise<ApiResponse> {\r\n    try {\r\n      if (!todoData.task && !todoData.status) {\r\n        throw new Error('至少需要更新一个字段');\r\n      }\r\n\r\n      const response = await fetch(`${BASE_URL}/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(todoData),\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.error || '更新TODO失败');\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('更新TODO错误:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async deleteTodo(id: string): Promise<ApiResponse> {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.error || '删除TODO失败');\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('删除TODO错误:', error);\r\n      throw error;\r\n    }\r\n  },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}